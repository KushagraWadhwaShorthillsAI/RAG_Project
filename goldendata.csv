"question,expected_answer"
"What type of programming language is Python?, ""Python is an easy to learn, powerful programming language."" [cite: 2210]"
"What are some of Python's features?, ""Efficient high-level data structures and a simple but effective approach to object-oriented programming."" [cite: 2210]"
"What makes Python an ideal language for scripting?, ""Python’s elegant syntax and dynamic typing, together with its interpreted nature."" [cite: 2211]"
"Is the Python interpreter freely available?, ""Yes, the Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed."" [cite: 2212]"
"Can the Python interpreter be extended?, ""Yes, the Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C)."" [cite: 2214]"
"For what type of applications is Python suitable?, ""Python is also suitable as an extension language for customizable applications."" [cite: 2215]"
"What does this tutorial introduce?, ""This tutorial introduces the reader informally to the basic concepts and features of the Python language and system."" [cite: 2216]"
"Is hands-on experience necessary to use this tutorial?, ""It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well."" [cite: 2217]"
"Where can you find a description of standard objects and modules?, ""The Python Standard Library."" [cite: 2218]"
"Where can you find a more formal definition of the language?, ""The Python Language Reference."" [cite: 2218]"
"What should you read to write extensions in C or C++?, ""Extending and Embedding the Python Interpreter and Python/C API Reference Manual."" [cite: 2219]"
"Does this tutorial cover every single feature of Python?, ""No, this tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature."" [cite: 2220]"
"What is the purpose of this tutorial?, ""Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style."" [cite: 2221]"
"What will you be able to do after reading this tutorial?, ""After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library."" [cite: 2222]"
"What else is worth going through?, ""The Glossary is also worth going through."" [cite: 2223]"
"What type of task can you automate with Python?, ""You may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps you’d like to write a small custom database, or a specialized GUI application, or a simple game."" [cite: 2224, 2225]"
"If you are a professional software developer, what problem might you have with C/C++/Java libraries?, ""You may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow."" [cite: 2226, 2227]"
"What can Python be used for in terms of testing?, ""Perhaps you’re writing a test suite for such a library and find writing the testing code a tedious task."" [cite: 2227, 2228]"
"When might you use Python as an extension language?, ""Or maybe you’ve written a program that could use an extension language, and you don’t want to design and implement a whole new language for your application."" [cite: 2228, 2229]"
"What are shell scripts good at?, ""Shell scripts are best at moving around files and changing text data, not well-suited for GUI applications or games."" [cite: 2229, 2230]"
"What are some drawbacks of using C/C++/Java?, ""It can take a lot of development time to get even a first-draft program."" [cite: 2230, 2231]"
"Is Python available on multiple operating systems?, ""Yes, Python is available on Windows, macOS, and Unix operating systems."" [cite: 2231, 2232]"
"Does Python offer more structure than shell scripts?, ""Yes, Python is simple to use, but it is a real programming language, offering much more structure and support for large programs than shell scripts or batch files can offer."" [cite: 2232, 2233]"
"How does Python compare to C in terms of error checking?, ""On the other hand, Python also offers much more error checking than C."" [cite: 2233, 2234]"
"What kind of data types does Python have?, ""Being a very-high-level language, it has high-level data types built in, such as flexible arrays and dictionaries."" [cite: 2233, 2234]"
"Is Python applicable to a large problem domain?, ""Because of its more general data types Python is applicable to a much larger problem domain than Awk or even Perl, yet many things are at least as easy in Python as in those languages."" [cite: 2234, 2235]"
"Can you split your program into modules in Python?, ""Python allows you to split your program into modules that can be reused in other Python programs."" [cite: 2235, 2236]"
"What does Python come with?, ""It comes with a large collection of standard modules that you can use as the basis of your programs — or as examples to start learning to program in Python."" [cite: 2236, 2237]"
"What do some of the modules provide?, ""Some of these modules provide things like file I/O, system calls, sockets, and even interfaces to graphical user interface toolkits like Tk."" [cite: 2237, 2238]"
"What is an advantage of Python being an interpreted language?, ""Python is an interpreted language, which can save you considerable time during program development because no compilation and linking is necessary."" [cite: 2238, 2239]"
"How can the interpreter be used?, ""The interpreter can be used interactively, which makes it easy to experiment with features of the language, to write throw-away programs, or to test functions during bottom-up program development. It is also a handy desk calculator."" [cite: 2239, 2240]"
"What does Python enable programs to be?, ""Python enables programs to be written compactly and readably."" [cite: 2240, 2241]"
"Why are Python programs typically shorter?, ""The high-level data types allow you to express complex operations in a single statement; statement grouping is done by indentation instead of beginning and ending brackets; no variable or argument declarations are necessary."" [cite: 2241, 2242, 2243]"
"What does it mean for Python to be extensible?, ""Python is extensible: if you know how to program in C it is easy to add a new built-in function or module to the interpreter, either to perform critical operations at maximum speed, or to link Python programs to libraries that may only be available in binary form (such as a vendor-specific graphics library)."" [cite: 2243, 2244]"
"What can you do once you are really hooked on Python?, ""Once you are really hooked, you can link the Python interpreter into an application written in C and use it as an extension or command language for that application."" [cite: 2244, 2245]"
"Where did the name Python come from?, ""By the way, the language is named after the BBC show “Monty Python’s Flying Circus” and has nothing to do with reptiles."" [cite: 2245, 2246]"
"What is encouraged in Python documentation?, ""Making references to Monty Python skits in documentation is not only allowed, it is encouraged!"" [cite: 2247, 2248]"
"What is the best way to learn a language?, ""Since the best way to learn a language is to use it, the tutorial invites you to play with the Python interpreter as you read."" [cite: 2248, 2249]"
"What does the next chapter explain?, ""In the next chapter, the mechanics of using the interpreter are explained."" [cite: 2249, 2250]"
"What kind of information is in the next chapter?, ""This is rather mundane information, but essential for trying out the examples shown later."" [cite: 2250, 2251]"
"What does the rest of the tutorial introduce?, ""The rest of the tutorial introduces various features of the Python language and system through examples, beginning with simple expressions, statements and data types, through functions and modules, and finally touching upon advanced concepts like exceptions and user-defined classes."" [cite: 2251, 2252]"
"Where is the Python interpreter usually installed on Unix machines?, ""The Python interpreter is usually installed as /usr/local/bin/python3.13 on those machines where it is available."" [cite: 2252, 2253, 2254]"
"How can you start the Python interpreter on Unix?, ""Putting /usr/local/bin in your Unix shell’s search path makes it possible to start it by typing the command: to the shell. [1] Since the choice of the directory where the interpreter lives is an installation option, other places are possible; check with your local Python guru or system administrator. (E.g., /usr/local/python is a popular alternative location.)"" [cite: 2252, 2253, 2254]"
"How can you start the Python interpreter on Windows machines?, ""On Windows machines where you have installed Python from the Microsoft Store, the python3.13 command will be available. If you have the py.exe launcher installed, you can use the py command."" [cite: 2254, 2255, 2256, 2257]"
"How do you exit the interpreter?, ""Typing an end-of-file character (Control-D on Unix, Control-Z on Windows) at the primary prompt causes the interpreter to exit with a zero exit status. If that doesn’t work, you can exit the interpreter by typing the following command: quit()."" [cite: 2254, 2255, 2256, 2257]"
"What line-editing features does the interpreter have?, ""The interpreter’s line-editing features include interactive editing, history substitution and code completion on systems that support the GNU Readline library."" [cite: 2258, 2259, 2260, 2261, 2262]"
"How can you check if command line editing is supported?, ""Perhaps the quickest check to see whether command line editing is supported is typing Control-P to the first Python prompt you get. If it beeps, you have command line editing; see Appendix Interactive Input Editing and History Substitution for an introduction to the keys. If nothing appears to happen, or if ^P is echoed, command line editing isn’t available; you’ll only be able to use backspace to remove characters from the current line."" [cite: 2258, 2259, 2260, 2261, 2262]"
"How does the interpreter operate when called with standard input connected to a tty device?, ""The interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty device, it reads and executes commands interactively."" [cite: 2263, 2264, 2265, 2266, 2267]"
"How does the interpreter operate when called with a file name argument?, ""When called with a file name argument or with a file as standard input, it reads and executes a script from that file."" [cite: 2263, 2264, 2265, 2266, 2267]"
"What is another way to start the interpreter?, ""A second way of starting the interpreter is python -c command [arg] ..., which executes the statement(s) in command, analogous to the shell’s -c option."" [cite: 2265, 2266, 2267]"
"What should you do if Python statements contain spaces or other characters that are special to the shell?, ""Since Python statements often contain spaces or other characters that are special to the shell, it is usually advised to quote command in its entirety."" [cite: 2266, 2267]"
"How can some Python modules be invoked?, ""Some Python modules are also useful as scripts. These can be invoked using python -m module [arg] ..., which executes the source file formodule as if you had spelled out its full name on the command line."" [cite: 2267, 2268, 2269]"
"What is useful to do when a script file is used?, ""When a script file is used, it is sometimes useful to be able to run the script and enter interactive mode afterwards."" [cite: 2268, 2269]"
"How can you run a script and enter interactive mode afterward?, ""This can be done by passing -i before the script. All command line options are described in Command line and environment."" [cite: 2269, 2270, 2271, 2272, 2273, 2274, 2275]"
"What happens to the script name and additional arguments when known to the interpreter?, ""When known to the interpreter, the script name and additional arguments thereafter are turned into a list of strings and assigned to the argv variable in the sys module."" [cite: 2270, 2271, 2272, 2273, 2274, 2275]"
"How can you access the list of strings?, ""You can access this list by executing import sys."" [cite: 2271, 2272, 2273, 2274, 2275]"
"What is the length of the list if no script and no arguments are given?, ""The length of the list is at least one; when no script and no arguments are given, sys.argv[0] is an empty string."" [cite: 2271, 2272, 2273, 2274, 2275]"
"What is sys.argv[0] set to when the script name is given as '-'?, ""When the script name is given as '-', (meaning standard input), sys.argv[0] is set to '-'."" [cite: 2273, 2274, 2275]"
"What is sys.argv[0] set to when -c command is used?, ""When -c command is used, sys.argv[0] is set to '-c'."" [cite: 2273, 2274, 2275]"
"What is sys.argv[0] set to when -m module is used?, ""When -m module is used, sys.argv[0] is set to the full name of the located module."" [cite: 2273, 2274, 2275]"
"What happens to options found after -c command or -m module?, ""Options found after -c command or -m module are not consumed by the Python interpreter’s option processing but left in sys.argv for the command or module to handle."" [cite: 2276, 2277, 2278, 2279]"
"What mode is the interpreter in when commands are read from a tty?, ""When commands are read from a tty, the interpreter is said to be in interactive mode."" [cite: 2276, 2277, 2278, 2279]"
"What does the interpreter prompt for in interactive mode?, ""In this mode it prompts for the next command with the primary prompt, usually three greater-than signs (>>>); for continuation lines it prompts with the secondary prompt, by default three dots (...)."" [cite: 2279, 2280]"
"What does the interpreter print before the first prompt?, ""The interpreter prints a welcome message stating its version number and a copyright notice before printing the first prompt:"" [cite: 2279, 2280]"
"When are continuation lines needed?, ""Continuation lines are needed when entering a multi-line construct. As an example, take a look at this if statement:"" [cite: 2281, 2282, 2283]"
"What is the default encoding for Python source files?, ""By default, Python source files are treated as encoded in UTF-8."" [cite: 2281, 2282, 2283]"
"What is the encoding used for Python source files by default?, ""By default, Python source files are treated as encoded in UTF-8."""
"What is the most commonly used encoding for general-purpose text?, ""UTF-8 is the most commonly used encoding for general-purpose text; many other encodings that Python supports can also be used."""
"What is an alternate encoding declaration?, ""An alternative encoding declaration is needed only if a different encoding than the default UTF-8 is going to be used."""
"If the first line of the source file is not a shebang line, how should an encoding declaration be placed?, ""To declare an encoding other than the default encoding, a special comment line should be added as the first line of the file. The syntax is shown in the next example:"""
"If the first line of the source file is a shebang line, how should an encoding declaration be placed?, ""If the first line of the file is a shebang line, the encoding declaration should be placed as the second line."""
"What is the purpose of an encoding declaration?, ""More precisely, the first or second line must match the regular expression coding[:=]\s*([-\w.]+)."""
"Can you use a coding declaration to set the character encoding for unicode literals?, ""No, you can not use the coding declaration to set the character encoding used for Unicode literals. The encoding used in such literals is always UTF-8."""
"What is the advantage of using the Python interpreter interactively?, ""One of the big advantages of Python is the interpreter can be used interactively, which means you can enter lines of Python code and immediately see the results."""
"How do you start the interactive interpreter?, ""You can start the interactive interpreter by simply typing python or python3 at your terminal prompt."""
"What is the primary prompt in the interactive interpreter?, ""When you start the interactive interpreter, you’ll see a greeting message followed by a prompt, three greater-than signs (>>> )."""
"How do you type a multi-line statement in the interactive interpreter?, ""To type a multi-line statement, they have to continue on subsequent lines. As an example, take a look at this if statement:"""
"What is the secondary prompt for continuation lines in the interactive interpreter?, ""When more lines are needed to continue the multi-line construct, the interpreter issues the secondary prompt, by default three dots (...)."""
"How do you leave the interactive interpreter?, ""To leave the interactive interpreter, you can type quit() at the prompt:"""
"What is the behavior of the interactive interpreter regarding errors?, ""When an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it then returns to the primary prompt; when input came from a file, the program exits with a nonzero exit status after printing the stack trace."""
"What type of errors are catchable in a try statement?, ""All errors are exceptions in Python. All exceptions are catchable by the try statement."""
"What happens to the last evaluated expression in the interactive interpreter?, ""In interactive mode, the last printed expression value is assigned to the variable _."""
"Can the variable '_' be used in subsequent interactive interpreter sessions?, ""This variable _ should be treated as read-only by the user. Don’t explicitly assign a value to it — you would mask the built-in variable with a similarly named local variable with that behavior."""
"What happens to the variable '_' when a value is not printed?, ""Apart from that, its purpose is to assist the interactive interpreter user, so it is fine to use it for other purposes. When not in interactive mode, _ has no special meaning and is still defined but is not automatically assigned to."""
"How are Python source files named?, ""Python source files are treated as normal text files and can be created or edited with any text editor. Python source files typically use .py as the file extension."""
"What is a module in Python?, ""To make a runnable script, Python requires that the file be saved with the .py extension. If a filename is something.py, then by writing import something, you will be able to refer to the functions, variables, and classes inside the old filename."""
"How can you make a Python script executable on Unix-like systems?, ""On Unix-like systems, the Python script can be made directly executable, like a shell script, by putting the line #!/usr/bin/env python3.13 (assuming that the interpreter is on the user’s PATH) at the beginning of the script and setting the executable mode of the file using the chmod command."""
"What is a shebang line?, ""The #!/usr/bin/env python3.13 line is known as the shebang line."""
"What does the shebang line tell the operating system?, ""It tells the operating system to run the script using the interpreter located in that specific path."""
"How is the encoding of a Python source file handled when a shebang line is present?, ""Note that the #!/usr/bin/env python3.13 line has no special meaning in Python’s syntax. The line must be the first line in the script. The default encoding of Python source files is UTF-8."""
"What can you do with modules?, ""Executable code for a module is executed when the module is first imported, and can only be run once per session."""
"What is a module's namespace?, ""Each module has its own namespace, which is effectively a named scope for the variables defined in the module. In modules, you can refer to your top-level variables as global variables."""
"How can users of a module use global variables?, ""Users of a module can use global names by writing module_name.variable_name."""
"Can modules import other modules?, ""Modules can import other modules. It is customary but not required to place all import statements at the beginning of a module (or script, for that matter)."""
"What are the different ways to import module contents?, ""There are a few different ways to import module contents."""
"How can you import a module itself?, ""A module name can be imported directly:"""
"How can you access the module's namespace after importing the module itself?, ""This makes the module name spam available, and permits the user to refer to all names defined within the module using the module name as a prefix:"""
"How can you import specific names from a module?, ""A different variant of the import statement imports names from a module directly into the importing module’s symbol table:"""
"How can you import all names that a module defines?, ""This imports all names except those beginning with an underscore (_). Most programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you already have defined. Note that in general practice wild card imports should be discouraged."""
"How can you rename a module's name?, ""For every imported item you can assign a different name:"""
"Can you rename a module itself?, ""This essentially renames the module spam, and can be used when you want to use parts of modules by the same name — but you want to control which one gets used."""
"What happens each name is assigned to a value?, ""For instance, in a plain assignment like x = value, the name x is bound to refer to the given value."""
"How can you delete a name binding?, ""The same is true for function and class definitions: they also bind a name in the namespace. It is possible to explicitly delete a binding using the del statement."""
"What happens when you delete a name?, ""Deleting a name removes the binding of that name from the namespace it belongs to. If the name was defined in an outer scope (e.g. a global variable in a function), it will still be accessible after deleting it in the inner scope."""
"What happens if you delete a name before it has been defined?, ""Trying to use a name before it is assigned to will raise a NameError exception."""
"What is the scope of a name?, ""The scope defines the visibility of a name within a program."""
"What are the different scopes in Python?, ""If a local variable is defined in a block, its scope extends to the entire block. If a variable is defined in a function definition, its scope extends to the entire function. If a class variable is defined in a class definition, its scope is limited to the class definition. If a module variable is defined in the main body of a module file, its scope extends to the entire module file (including imports)."""
"When can scopes be nested?, ""Scopes can be nested. If one function calls another, a new scope is created for the called function. If a block is nested in another block, a new scope is created for the nested block, and so on."""
"What is the global scope?, ""The global scope for a script is the module scope of the module within which it is defined. Function definitions in a module will create a nested scope within the global scope."""
"What happens when a name is used in a scope?, ""When a name is used in a scope, it is resolved using the nearest enclosing scope. If that scope does not contain the name, it is searched in the next enclosing scope, and so on."""
"What happens if a name is not found in any scope?, ""If the name is not found in any scope, a NameError exception is raised."""
"What happens if a name is assigned to in a scope?, ""If a name is assigned to in a scope, it is always created or re-bound in that scope. It is never assigned to a name in an outer scope."""
"How can you indicate that a variable is in the global scope?, ""If a variable is to be assigned to in the nearest enclosing scope, it has to be explicitly declared as nonlocal. Similarly, if a variable is to be assigned to in the global scope, it has to be declared as global."""
"What is the scope of names inside class definitions?, ""The scope of names inside class definitions is limited to the class block. Method scopes are always nested in class scopes."""
"What happens when a class definition places another class definition within its body?, ""If a class definition places another class definition within its body, the nested class’s scope is nested in the enclosing class’s scope."""
"What is the difference between global and nonlocal variables?, ""Global variables are variables defined and declared in the main body of the script. They are available throughout the lifetime of the script and can be accessed inside any function. Nonlocal variables are used in nested functions whose scope is not present in the global scope."""
"What is the purpose of the global statement?, ""The global statement is a declaration which holds for the entire current code block. It means that the listed identifiers are to be interpreted as globals."""
"What is the purpose of the nonlocal statement?, ""The nonlocal statement causes the corresponding identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals."""
"What happens when you use a nonlocal variable without a matching outer variable?, ""When the use of a nonlocal name is not matched to a pre-existing binding in an enclosing scope a SyntaxError is raised."""
"What are the special scoping rules for class definitions?, ""Special rules apply to names when class definitions are executed."""
"What happens when a class definition creates a new namespace?, ""Function definitions placed inside a class normally define methods of the new class. Function definitions placed outside class definitions are not methods."""
"What scope is used as the enclosing scope for any methods?, ""When a class definition is entered, a new namespace is created, and used as the local scope — thus, all assignments to local variables go into this new namespace. When a class definition leaves normally, a class object is created. This is basically a wrapper around the contents of the namespace created by the class definition; it is further described in the next section. The original local scope (the one in effect just before the class definition was entered) is reinstated, and the class object is bound here to the class name given in the class definition header (ClassName)."""
"What happens when a name is not found in the local scope during a method call?, ""When a name is used in a method, its nearest enclosing scope is searched. In the case of a method, its nearest enclosing scope is its class. The search then proceeds to the module global scope and then to the built-in scope."""
"Can method definitions directly refer to class attributes?, ""By this convention, references to instance variables inside a method textually refer to self.name. Similarly, references to class attributes can be self.class.name if necessary, though classname.name refers to the same location, and is preferred because it is unambiguous."""
"Can function definitions occur inside other function definitions?, ""Yes, function definitions can occur (“be nested”) inside other function definitions."""
"What are names in the enclosing function's local scope readable in a nested function?, ""Names in the enclosing function’s local scope are readable in the nested function. The nonlocal keyword is needed to modify them."""
"What does the name resolution process look like?, ""The name resolution process looks like this: 1. Local — If the name is assigned to in any way within a function, that name is local. 2. Enclosing function locals — Names in the local scope of any and all enclosing functions (from inner-most to outer-most scope). 3. Global — Names assigned at the top level of a module file, or declared global in a def within the file. 4. Built-in — Names preassigned in the built-in names module: open, range, SyntaxError, …"""
"What happens if the global statement is in effect?, ""If the global statement is in effect, the name is always referring to the global scope."""
"What happens if the nonlocal statement is in effect?, ""If the nonlocal statement is in effect, the name refers to a previously bound variable in the nearest enclosing function scope."""
"What is a special case to note about the name resolution?, ""This determination of whether a name is in a local scope or not occurs purely based on assignments. Therefore, a construct such as this will print 5 and then raise an UnboundLocalError:"""
"What happens when you unbind a name?, ""The del statement removes the binding of a name from a scope. If the name was defined in an outer scope, it will still be accessible after deleting it in the inner scope."""
"What happens if you use a name after deleting it?, ""Using a name after deleting it will raise a NameError exception (unless it is assigned to again before it is used)."""
"What namespaces and scope determine?, ""Namespaces and scope determine which name a particular occurrence of a name refers to in a program’s text."""
"What are attributes?, ""Attributes are any name following a dot."""
"What is an expression that evaluates to a module object?, ""In the expression z.real, for example, real is an attribute of the object z."""
"What expressions can attributes be assigned to?, ""Attributes can be read or assigned to. Module attributes are writable: you can write modname.the_answer = 42. Writable attributes may also be deleted with the del statement. For example, del modname.the_answer will remove the attribute the_answer from the object named by modname."""
"What namespaces are created at different times?, ""Namespaces are created at different moments and have different lifetimes."""
"When is the namespace containing the built-in names created?, ""The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted."""
"When is the global namespace for a module created?, ""The global namespace for a module is created when the module definition is read in; normally, module namespaces also last until the interpreter quits."""
"What happens to the statements executed by the top-level invocation of the interpreter?, ""The statements executed by the top-level invocation of the interpreter, either read from a script file or interactively, are considered part of a module called __main__, so they have their own global namespace."""
"When is the local namespace for a function created?, ""The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function."""
"What happens with recursive invocations?, ""Recursive invocations each have their own local namespace."""
"What is a scope?, ""A scope is a textual region of a Python program where a namespace is directly accessible."""
"When are namespaces determined statically?, ""Although scopes are determined statically, they are used dynamically. During any execution, there are 2 or 3 nested scopes whose namespaces are directly accessible:"""
"What scopes are searched when an unqualified name is referenced during the execution of a function?, ""When an unqualified name is referenced during the execution of a function, the name is searched for in the local namespace, then in the namespaces of any enclosing functions, then in the global namespace, and finally in the built-in namespace. If the name is not found in any of these namespaces, a NameError exception is raised."""
"When a name is assigned to in a function, where does the assignment always go?, ""If a name is assigned to in some way within a function, that name is always bound in the local namespace for that function. Names are never assigned to the namespace of an enclosing function unless the nonlocal statement has been used."""
"What happens if a global statement is used in a function?, ""If a global statement is used, then all references and assignments go directly to the global namespace that contains the module’s global names."""
"What is the other scope to rebind variables found outside of the innermost scope?, ""The other scope to rebind variables found outside of the innermost scope is the nonlocal scope; variables in that scope can be referenced and rebound in enclosing scopes by using a nonlocal statement."""
"What happens if no nonlocal statement is used?, ""If no nonlocal declaration occurs, variables that are not global appear read-only to outside code, although they may be reassigned to within the inner scope, in effect creating a new local variable in the inner scope with the same name as the enclosing scope variable."
"What is the first argument of a method of a class?, ""The first argument of a method of a class is always the object instance, called self by convention."""
"What other name convention might one encounter?, ""Just like scopes, you can encounter different name resolutions in class scopes."""
"What happens if a name is not found in the class?, ""If a name is not found in class, the search proceeds to the base classes."""
"What is the best way to think about scopes and namespaces?, ""Scopes determine the visibility and lifetime of names, while namespaces organize and manage those names."""
"What is the result of the expression 'spam.egg'?, ""For instance, the expression spam.egg (where spam is a module object) refers to the attribute egg in module spam."""
"What happens if a module imports a function defined in another module with the same name?, ""For instance, if a module imports a function defined in another module, and that function shares the same name as a global name already defined in the importing module, there are two notations you can use to refer to either of the two names."""
"What happens if you import a module using 'import spam'?, ""Each module has a private symbol table, used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidentally clashing with a user’s global variables. On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, modname.itemname."""
"Can modules import other modules?, ""Modules can import other modules. It is customary but not required to place all import statements at the beginning of a module (or script, for that matter)."""
"What is the first step in interpreting import statements?, ""When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path."""
"What does the sys.path variable contain?, ""sys.path is initialized from these locations: The directory containing the input script (or the current directory when no file is specified). PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH). The installation-dependent default."""
"What happens after the module is found?, ""After that, the module spam is executed."""
"What happens if the executable code for a module is run again on subsequent imports?, ""Each module is only imported once per interpreter session. If you change your module files, you must restart the interpreter or use importlib.reload(), for changes to be picked up."""
"What happens when a Python script is run?, ""Each script has a module called __main__."""
"Can a module discover whether it is running in the main scope or not?, ""Yes, a module can discover whether or not it is running in the main scope by checking its own __name__."""
"What is the value of __name__ when the module is run as the main program?, ""When a module is run as the main program, its __name__ attribute is set to '__main__' ."""
"What is the value of __name__ when the module is imported?, ""When a module is imported, its __name__ is set to the module’s name."""
"What can be achieved by checking __name__?, ""This allows modules to provide either a convenient interface when imported, or a main program when run as a script."""
"How can you make a module's code runnable as a script?, ""To do this, encapsulate the script’s code in an if block that only runs when __name__ is set to '__main__'."""
"What is a module object?, ""Modules have a namespace containing arbitrary Python objects. Most simply, modules are used as namespaces. If you are a Python programmer you surely have encountered this as modname.name."""
"What can modules contain?, ""Modules can contain executable statements as well as function definitions."""
"What are the benefits of using modules for grouping code?, ""Modules offer the benefits of using the module’s namespace as separate global namespace, allowing you to organize your code reasonably."""
"Can modules import other modules?, ""Modules can import other modules. It is customary but not required to place all import statements at the beginning of a module."""
"How can you import specific names directly into the importing module's symbol table?, ""from modname import name1, name2, .... This does not introduce the module name from which the imports are taken in the local symbol table (so in the example, spam is not defined)."""
"How can you import all names that a module defines?, ""from modname import *. This imports all names except those beginning with an underscore (_). In most cases, Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you already have defined."""
"What mechanism is provided to hide names from 'from module import *'?, ""Modules can do this by defining a special attribute named __all__ at the top of the module that holds a list of names to be imported."""
"What happens if __all__ is not defined?, ""If __all__ is not defined, the statement from spam import * does not import all names from the module spam into the current namespace; it only ensures that the module spam has been imported."""
"When are names imported?, ""Most names are imported only once when the module is first processed."""
"What names does 'import *' import if __all__ is defined?, ""If __all__ is defined, only the names explicitly listed will be imported."""
"What is the coding style for indentation?, ""Use 4 spaces per indentation level."""
"Should you use tabs or spaces for indentation?, ""Spaces are the preferred indentation method. Tabs should be used solely to remain consistent with code that is already indented with tabs."""
"What should Python 3 code disallow?, ""Python 3 disallows mixing the use of tabs and spaces for indentation."""
"What should be the maximum line length?, ""Limit all lines to a maximum of 79 characters."""
"How should long lines of code be wrapped?, ""The preferred way of wrapping long lines is by using Python’s implied line continuation inside parentheses, square brackets and curly braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses."""
"When should extra blank lines be used?, ""Surround top-level function and class definitions with two blank lines. Method definitions inside a class are surrounded by a single blank line. Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations). Use blank lines in functions, sparingly, to indicate logical sections."""
"What is the default encoding for Python source files?, ""Python core distributions should always use UTF-8 (or ASCII). Files using ASCII or UTF-8 should not have an encoding declaration."""
"What is the recommended style for comments?, ""Comments that contradict the code are worse than no comments. Always make it a priority to keep your comments up-to-date when the code changes. Comments should be complete sentences. The first word, unless it is an identifier that begins with a lower case letter, should be capitalized. Block comments generally consist of one or more paragraphs built out of complete sentences, with each line ending in a period. In multi-sentence comments, you should use two spaces after sentence-ending periods. Ensure that your comments are clear and easily understandable by other speakers of the English language."""
"What is a block comment?, ""Block comments generally apply to some (or all) of the code that follows them, and are indented to the same level as that code. Each line of a block comment starts with a # and a single space (unless it is indented text inside the comment)."""
"What is an inline comment?, ""An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement. They should start with a # and a single space."""
"What is the convention for docstrings?, ""Write docstrings for all public modules, functions, classes, and methods. Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after the def line."""
"What should a docstring contain?, ""Docstrings should be organized as summary lines (one physical line) followed by a blank line followed by any elaboration. The summary line may be on the same line as the opening triple quote or on the next line."""
"What convention should be used for variable names?, ""Variable names follow the same convention as function names. Module names should be short, all-lowercase names. Underscores can be used in module names if it improves readability. Python packages should also have short, all-lowercase names, although underscores are discouraged."""
"What convention should be used for Class names?, ""Class names should normally use the CapWords convention."""
"What convention should be used for Exception names?, ""Because exceptions should be classes, the class-naming convention applies here. However, you should add the suffix “Error” to your exception names (if the exception actually is an error)."""
"What convention should be used for Function names?, ""Function names should be lowercase, with words separated by underscores as necessary to improve readability."""
"What convention should be used for Function and method arguments?, ""Always use self for the first argument to instance methods. Always use cls for the first argument to class methods."""
"What convention should be used for Method names and instance variables?, ""Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability. Use one leading underscore only for non-public methods and instance variables. To avoid name clashes with subclasses, use two leading underscores to invoke Python’s name mangling rules."""
"What are constants?, ""Constants are usually defined on a module level and written in all capital letters with underscores separating words."""
"What should you consider when designing for inheritance?, ""Always decide whether a class’s methods (and instance variables) should be public or non-public. If in doubt, choose non-public; it’s easier to make it public later than to make a public attribute non-public."""
"What are “private” instance variables?, ""“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g., _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice."""
"What is name mangling?, ""Name mangling is a technique used to avoid name clashes with subclasses. Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it may be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances."""
"What are the arguments for using function annotations?, ""Function annotations provide a way of associating arbitrary metadata with function parameters and return values."""
"What is the syntax for function annotations?, ""Function annotations are completely optional parts of a function definition. Annotations for parameters are defined by a colon following the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal ->, followed by an expression, between the parameter list and the colon denoting the end of the function header. Annotations for parameters can be expressions that evaluate to any Python value."""
"What happens to annotation expressions at compile time?, ""The evaluation of annotation expressions happens at the time the function definition is executed."""
"Where are annotations stored?, ""Annotations are stored in the __annotations__ attribute of the function as a dictionary, and form no other part of the function. Parameter defaults after the ':' delimiter of a parameter annotation."""
"What is the purpose of function annotations?, ""Function annotations can be used to provide type hints for function parameters and return values. They can also be used for other purposes, such as documenting the expected input and output types of a function."""
"What are some common uses for function annotations?, ""Type checking, Documentation, Code analysis, Runtime type checking, and Other uses."""
"What is the purpose of type checking?, ""Type checkers can use annotations to infer the type of a function’s parameters and return values, and to check that the function is called with the correct types of arguments."""
"What is the purpose of documentation?, ""Documentation generators can use annotations to create documentation for functions, including information about the expected types of arguments and return values."""
"What is the purpose of code analysis?, ""Static analysis tools can use annotations to perform code analysis, such as checking for potential type errors or unused variables."""
"What is the purpose of runtime type checking?, ""Libraries can use annotations to implement runtime type checking, which can be useful for debugging or testing."""
"What are some other uses for annotations?, ""Annotations can also be used for other purposes, such as providing information to ORMs, or defining function dispatching rules."""
"What is the purpose of the Python Data Model?, ""The Python Data Model describes aspects of Python objects."""
"What is an object in Python?, ""Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects."""
"What are the characteristics of every object?, ""Every object has an identity, a type and a value."""
"What is an object's identity?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. The ‘is’ operator compares the identity of two objects. The id() function returns an integer representing its identity."""
"What is an object's type?, ""An object’s type determines the operations that the object supports (e.g., “does it have a length?”) and also defines the possible values for objects of that type. The type() function returns an object’s type (which is an object itself)."""
"What is an object's value?, ""The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable."""
"What is a class?, ""The class of an object determines its type."""
"What are instances?, ""Instances are specific objects that are created from a class."""
"What are the principal built-in types?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the built-in mutable sequence types?, ""Mutable sequence types include lists and dictionaries."""
"What are the built-in immutable sequence types?, ""Immutable sequence types include strings, tuples, bytes, and range objects."""
"What are the built-in mapping types?, ""The built-in mapping type is the dictionary."""
"What is a numeric type?, ""These represent numeric data and are returned by numeric literals as a result of arithmetic operators."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type?, ""These represent integers of unlimited range, subject to available (virtual) memory."""
"What is the float type?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers. Usually, the abbreviation for floating point numbers."""
"What is the complex type?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part. To extract these parts from a complex number z, use z.real and z.imag."""
"What are iterator types?, ""Python supports a concept of iteration over containers. These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iteration protocol?, ""One type of iterator object is defined by having a __getitem__() method. Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iteration protocol?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method return?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method return?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What is a generator iterator?, ""Python’s generator provides a convenient way to implement the iterator protocol. If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods."""
"What are generator expressions?, ""Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the purpose of generator functions?, ""A function which has a yield statement is compiled as a generator function. When a generator function is called, it returns an iterator known as a generator iterator, or more commonly, a generator. The function body is executed by calling the generator’s next() method repeatedly until it raises StopIteration. Once they do, the generator’s job is done and it will never yield another value."""
"What happens when a generator function is called?, ""When a generator function is called, it returns an iterator known as a generator iterator, or more commonly, a generator."""
"How is the function body of a generator executed?, ""The function body is executed by calling the generator’s next() method repeatedly until it raises StopIteration. Once they do, the generator’s job is done and it will never yield another value."""
"What happens when a yield statement is encountered in a generator function?, ""When a yield statement is encountered, the state of the generator is frozen, and the value of expression_list is returned to the caller of next(). “Frozen” means that all local state is retained, including the current bindings to local variables, the instruction pointer, the pending try-statements, and the pending finally-clauses."""
"What is a context manager?, ""A context manager is an object that defines the runtime context to be established when executing a with statement. The context manager handles the entry into, and the exit from, the desired runtime context for the execution of the block of code within the with statement."""
"What are the methods that a context manager must implement?, ""Context managers are typically used to save and restore various kinds of global state, locking and unlocking resources, closing opened files, etc. Context managers are most often used in conjunction with the with statement, but can also be used by directly invoking their methods. Typical uses of context managers include wrapping the execution of a block of code in some kind of setup or cleanup action. The methods that a context manager needs to implement are: __enter__(), __exit__()"""
"What does the __enter__() method do?, ""Enter the runtime context and return either this object or another object related to the runtime context. If any exceptions occur when entering the runtime context, they must be propagated up by the context manager. This method should return the value that is to be assigned to the target, if any, in the as clause of the with statement."""
"What does the __exit__() method do?, ""Exit the runtime context and return a Boolean flag indicating if any exception that occurred should be suppressed. If an exception occurred during execution of the suite, its type, value, and traceback are passed as arguments to __exit__(). Otherwise, all three arguments are None. This method should return True if the exception should be suppressed, or False if the exception should be re-raised with the normal exception handling."""
"What are callable types?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is a function?, ""A function object is a wrapper around a function. It is a Python object which is callable and can be passed as an argument to another function."""
"What is a method?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method())."""
"What are class types?, ""A class’s type is the type of its instances. Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instances?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code objects?, ""A code object is a compiled sequence of Python byte code instructions. It is what most functions are turned into at compile time."""
"What is a module object?, ""A module object is a basic organizational unit of Python code, and is created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). A module object has a namespace implemented by a dictionary object."""
"What is a custom class?, ""A custom class is typically created by a class definition in a module."""
"What are instance attributes?, ""Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What are callable class instances?, ""Callable class instances, by default, all class instances have a dictionary for attribute storage."""
"What is a built-in function object?, ""Built-in function objects are wrappers around C functions. Examples of built-in functions include len() and math.sin() (math is an example of a built-in module)."""
"What are built-in method objects?, ""These really are just a different disguise of built-in functions, this time containing an object passed to them as the ‘self’ argument. An example of a built-in method is alist.append(), assume alist is a list object."""
"What are the important implementation details for Python objects?, ""Object representations are exposed in different ways in CPython. In C, all Python objects are represented by a PyObject C struct."""
"What is the PyObject struct?, ""This contains the object’s type pointer and reference count."""
"What is an object's type pointer?, ""The type pointer points to the object’s type object."""
"What is an object's reference count?, ""The reference count is used by the CPython memory manager."""
"What are the types of objects?, ""The standard object type hierarchy is described below. It lists the built-in types that Python supports. Extension types (defined in C, C++, or other languages) are not listed, except for some of the more important ones like object. Additional base types that are not strictly defined by Python are described towards the end of the hierarchy."""
"What is the ultimate base class of all objects?, ""None, and object are the ultimate base classes of all objects."""
"What is the type of None?, ""The None type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What is the base class for all class types?, ""object is the base class for all class types. It does not have a dictionary, so the object.__dict__ attribute cannot be assigned to. object does not have a __weakref__ slot, so attributes cannot be weakly referenced."""
"What are the numeric types?, ""Python has three distinct numeric types: integers, floating point numbers, and complex numbers."""
"What is the integer type?, ""These represent numbers in an unlimited range, subject to available (virtual) memory. Shift and bitmask operations are assumed to be carried out in a two’s complement variant of binary arithmetic, and negative numbers are represented in the two’s complement variant."""
"What is the integer type for Boolean values?, ""Boolean values are implemented as a subtype of integers. The integer type has one more bit representation rule specific to non-negative integers. The integers 0 and 1 are the only objects that ever have this rule."""
"What is the floating point type?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers. Usually referred to as floats."""
"What is the complex number type?, ""These represent complex numbers as a pair of machine-level double precision floating point numbers. The same caveats apply as for floating point numbers regarding representational accuracies."""
"What are sequence types?, ""These represent finite ordered index sets. The index set is a set of non-negative whole numbers. All sequences are iterable. The built-in function len() returns the number of items of a sequence. When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1. Item a of sequence a has index i if 0 <= i < n. Python also supports slicing."""
"What are the immutable sequence types?, ""An immutable sequence object cannot be changed after it is created. (If another object needs to be created with a different value, this is usually achieved by computing a return value of a certain operation.)"""
"What are the immutable sequence types in Python?, ""The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What is the string type?, ""These represent immutable sequences of Unicode code points. All of the items in a string are Unicode code points represented as Unicode strings of length 1."""
"What is the tuple type?, ""These represent immutable sequences of arbitrary Python objects. Tuples of two or more items are formed by comma-separated lists of expressions. There is also a special syntax to represent empty tuples: the pair of parentheses. The sole item in a one-tuple (a ‘singleton’) can be formed by affixing a comma to an expression (an expression by itself does not create a tuple, since parentheses must be usable for grouping of expressions). Tuples are used for grouping together related data, such as the x, y coordinates of a point. Tuples are also used for immutable sequences of heterogeneous data (such as the 2-tuples produced by the enumerate() built-in)."""
"What is the bytes type?, ""Bytes objects are immutable sequences of single bytes. There are two literal forms for bytes: Literals for bytes are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. Only ASCII characters are permitted in bytes literals; any code unit with a numeric value greater than 127 must be expressed as an escape. Like string literals, bytes literals may also be prefixed with an 'r'."""
"What is the range type?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers. They are commonly used for looping, but are useful in a number of other contexts. The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent. Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types?, ""Mutable sequences can be changed after they are created."""
"What are the mutable sequence types in Python?, ""The following types are mutable sequences: List, Byte Array."""
"What is the list type?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items). Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What is the byte array type?, ""The bytearray type is a mutable sequence of integers in the range 0 <= x < 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most of the methods that the bytes type has. Byte arrays can be created in various ways: Creating an empty instance: bytearray(); Creating an instance of the same size as iterable: bytearray(iterable); Creating a copy of an existing binary data: bytearray(string, encoding[, errors]); Creating from a buffer object: bytearray(object)."""
"What are set types?, ""These represent unordered, finite sets of unique, immutable objects. As such, they cannot be indexed by any subscript. However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type?, ""These represent a mutable set. They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type?, ""These represent an immutable set. They are created by the built-in frozenset() constructor. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key. For the moment, only hashable objects can be members of a set."""
"What are mapping types?, ""These represent finite sets of objects indexed by arbitrary index sets. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type?, ""These represent finite sets of objects indexed by nearly arbitrary values. Dictionaries are mutable objects. They are created by the {key: value, ...} notation. Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What is the dictionary view objects?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes. Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type?, ""A function object is a wrapper around a function. It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types?, ""A class’s type is the type of its instances. Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types?, ""Code objects represent byte-compiled executable Python code, or bytecode. The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values. A code object is immutable and contains no references (directly or indirectly) to mutable objects. Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types?, ""Python supports a concept of iteration over containers. These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol?, ""One type of iterator object is defined by having a __getitem__() method. Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types?, ""Python’s generator provides a convenient way to implement the iterator protocol. If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods. Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class). Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes. If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance. Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"What is the type of a custom class?, ""Custom class types are typically created by class definitions (see section Class definitions). A class has a namespace implemented by a dictionary object. Class instance attributes are found in the dictionary of the"
"What is the value of an object?, ""The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What is a module?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). Each module has its own symbol table, used as the global symbol table for all objects defined in the module. Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances. Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type. A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__). Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class. Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition. When it is called, it gives access to a separate namespace (the function’s local namespace). Parameter lists are defined in the function definition. An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class. It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object. A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode. Code objects are immutable and contain no references (directly or indirectly) to mutable objects. The executable code for a module is wrapped in a code object. Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory. Plain integers (also just called integers) are implemented in C using longs. Integer literals are described in the numeric literals section. Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers. Usually also known as floats. These are often implemented in C using doubles. Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part. The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.) Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers. The built-in function len() returns the number of items of a sequence. When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1. Item i of sequence a is selected by a[i] and slices are defined in sequence types. Sequences are classified according to their mutability; immutable sequence types (strings, tuples, bytes and range objects) and mutable sequence types (lists and bytearrays)."""
"What are the immutable sequence types in Python?, ""An immutable sequence object cannot be changed after it is created. If another object with a different value must be created, it is created with the return value of an operation. In contrast, mutable sequence objects can be changed in place. The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What is the string type in Python?, ""Strings are immutable sequences of Unicode code points. There is one string type: str. Strings are sequences of Unicode code points represented as Unicode strings in memory. Unicode code points in the range U+0000—U+10FFFF can be represented in a string. Strings can be written in a variety of ways, including single quotes, double quotes, triple quotes, and escape sequences."""
"What is the tuple type in Python?, ""Tuples are immutable sequences of arbitrary Python objects. Tuples are sequences of arbitrary Python objects. Tuples are written as comma-separated values, optionally enclosed in parentheses. Tuples are immutable, and typically contain a heterogeneous sequence of elements that are accessed via unpacking (see section Assignment statements) or indexing (or even by attribute in the case of named tuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list."""
"What is the bytes type in Python?, ""Bytes objects are immutable sequences of single bytes. There are exactly two built-in bytes object types: bytes and bytearray. Bytes objects are immutable sequences of single bytes. Many of the string methods are available for bytes objects as well."""
"What is the byte array type in Python?, ""Byte array objects are a mutable counterpart to bytes objects. There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type. They are defined in the bytes and bytearray types section."""
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers. They are commonly used for looping, but are useful in a number of other contexts. The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent. Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created. The following types are mutable sequences: List, Byte Array."""
"What is the list type in Python?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items). Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What are set types in Python?, ""These represent unordered, finite sets of unique, immutable objects. As such, they cannot be indexed by any subscript. However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types in Python?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type in Python?, ""These represent a mutable set. They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type in Python?, ""These represent an immutable set. They are created by the built-in frozenset() constructor. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key."""
"What are mapping types in Python?, ""These represent finite sets of objects indexed by arbitrary index sets. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type in Python?, ""These represent finite sets of objects indexed by nearly arbitrary values. Dictionaries are mutable objects. They are created by the {key: value, ...} notation. Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What are dictionary view objects in Python?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes. Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types in Python?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type in Python?, ""A function object is a wrapper around a function. It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type in Python?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types in Python?, ""A class’s type is the type of its instances. Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types in Python?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types in Python?, ""Code objects represent byte-compiled executable Python code, or bytecode. The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values. A code object is immutable and contains no references (directly or indirectly) to mutable objects. Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types in Python?, ""Python supports a concept of iteration over containers. These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol in Python?, ""One type of iterator object is defined by having a __getitem__() method. Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol in Python?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types in Python?, ""Python’s generator provides a convenient way to implement the iterator protocol. If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods. Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class). Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes. If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance. Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"What is the type of a custom class?, ""Custom class types are typically created by class definitions (see section Class definitions). A class has a namespace implemented by a dictionary object. Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is the type of class objects?, ""A class object is a callable that produces a new instance of the class (for example, Class())."""
"What is the type of type objects?, ""Type objects represent the various object types. An object’s type is accessed by the built-in function type(). There are no special operations on types themselves. The standard module types defines names for all standard built-in types (some of which are the same names as the built-in functions); this is normally imported as follows: import types."""
"What is the identity of an object?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. The ‘is’ operator compares the identity of two objects. The id() function returns an integer representing its identity."""
"What is the value of an object?, ""The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What is a module?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). Each module has its own symbol table, used as the global symbol table for all objects defined in the module. Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances. Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type. A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__). Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class. Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition. When it is called, it gives access to a separate namespace (the function’s local namespace). Parameter lists are defined in the function definition. An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class. It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object. A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode. Code objects are immutable and contain no references (directly or indirectly) to mutable objects. The executable code for a module is wrapped in a code object. Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory. Plain integers (also just called integers) are implemented in C using longs. Integer literals are described in the numeric literals section. Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers. Usually also known as floats. These are often implemented"
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers. Usually also known as floats. These are often implemented in C using doubles. Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part. The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.) Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers. The built-in function len() returns the number of items of a sequence. When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1. Item i of sequence a is selected by a[i] and slices are defined in sequence types. Sequences are classified according to their mutability; immutable sequence types (strings, tuples, bytes and range objects) and mutable sequence types (lists and bytearrays)."""
"What are the immutable sequence types in Python?, ""An immutable sequence object cannot be changed after it is created. If another object with a different value must be created, it is created with the return value of an operation. In contrast, mutable sequence objects can be changed in place. The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What is the string type in Python?, ""Strings are immutable sequences of Unicode code points. There is one string type: str. Strings are sequences of Unicode code points represented as Unicode strings in memory. Unicode code points in the range U+0000—U+10FFFF can be represented in a string. Strings can be written in a variety of ways, including single quotes, double quotes, triple quotes, and escape sequences."""
"What is the tuple type in Python?, ""Tuples are immutable sequences of arbitrary Python objects. Tuples are sequences of arbitrary Python objects. Tuples are written as comma-separated values, optionally enclosed in parentheses. Tuples are immutable, and typically contain a heterogeneous sequence of elements that are accessed via unpacking (see section Assignment statements) or indexing (or even by attribute in the case of named tuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list."""
"What is the bytes type in Python?, ""Bytes objects are immutable sequences of single bytes. There are exactly two built-in bytes object types: bytes and bytearray. Bytes objects are immutable sequences of single bytes. Many of the string methods are available for bytes objects as well."""
"What is the byte array type in Python?, ""Byte array objects are a mutable counterpart to bytes objects. There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type. They are defined in the bytes and bytearray types section."""
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers. They are commonly used for looping, but are useful in a number of other contexts. The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent. Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created. The following types are mutable sequences: List, Byte Array."""
"What is the list type in Python?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items). Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What are set types in Python?, ""These represent unordered, finite sets of unique, immutable objects. As such, they cannot be indexed by any subscript. However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types in Python?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type in Python?, ""These represent a mutable set. They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type in Python?, ""These represent an immutable set. They are created by the built-in frozenset() constructor. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key."""
"What are mapping types in Python?, ""These represent finite sets of objects indexed by arbitrary index sets. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type in Python?, ""These represent finite sets of objects indexed by nearly arbitrary values. Dictionaries are mutable objects. They are created by the {key: value, ...} notation. Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What are dictionary view objects in Python?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes. Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types in Python?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type in Python?, ""A function object is a wrapper around a function. It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type in Python?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types in Python?, ""A class’s type is the type of its instances. Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types in Python?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types in Python?, ""Code objects represent byte-compiled executable Python code, or bytecode. The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values. A code object is immutable and contains no references (directly or indirectly) to mutable objects. Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types in Python?, ""Python supports a concept of iteration over containers. These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol in Python?, ""One type of iterator object is defined by having a __getitem__() method. Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol in Python?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types in Python?, ""Python’s generator provides a convenient way to implement the iterator protocol. If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods. Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class). Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes. If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance. Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"What is the type of a custom class?, ""Custom class types are typically created by class definitions (see section Class definitions). A class has a namespace implemented by a dictionary object. Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is the type of class objects?, ""A class object is a callable that produces a new instance of the class (for example, Class())."""
"What is the type of type objects?, ""Type objects represent the various object types. An object’s type is accessed by the built-in function type(). There are no special operations on types themselves. The standard module types defines names for all standard built-in types (some of which are the same names as the built-in functions); this is normally imported as follows: import types."""
"What is the identity of an object?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. The ‘is’ operator compares the identity of two objects. The ‘is’ operator compares the identity of two objects. The id() function returns an integer representing its identity."""
"What is the value of an object?, ""The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What is a module?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). Each module has its own symbol table, used as the global symbol table for all objects defined in the module. Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances. Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type. A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__). Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class. Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition. When it is called, it gives access to a separate namespace (the function’s local namespace). Parameter lists are defined in the function definition. An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class. It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object. A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode. Code objects are immutable and contain no references (directly or indirectly) to mutable objects. The executable code for a module is wrapped in a code object. Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory. Plain integers (also just called integers) are implemented in C using longs. Integer literals are described in the numeric literals section. Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers. Usually also known as floats. These are often implemented in C using doubles. Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part. The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.) Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers. The built-in function len() returns the number of items of a sequence. When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1. Item i of sequence a is selected by a[i] and slices are defined in sequence types. Sequences are classified according to their mutability; immutable sequence types (strings, tuples, bytes and range objects) and mutable sequence types (lists and bytearrays)."""
"What are the immutable sequence types in Python?, ""An immutable sequence object cannot be changed after it is created. If another object with a different value must be created, it is created with the return value of an operation. In contrast, mutable sequence objects can be changed in place. The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What is the string type in Python?, ""Strings are immutable sequences of Unicode code points. There is one string type: str. Strings are sequences of Unicode code points represented as Unicode strings in memory. Unicode code points in the range U+0000—U+10FFFF can be represented in a string. Strings can be written in a variety of ways, including single quotes, double quotes, triple quotes, and escape sequences."""
"What is the tuple type in Python?, ""Tuples are immutable sequences of arbitrary Python objects. Tuples are sequences of arbitrary Python objects. Tuples are written as comma-separated values, optionally enclosed in parentheses. Tuples are immutable, and typically contain a heterogeneous sequence of elements that are accessed via unpacking (see section Assignment statements) or indexing (or even by attribute in the case of named tuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list."""
"What is the bytes type in Python?, ""Bytes objects are immutable sequences of single bytes. There are exactly two built-in bytes object types: bytes and bytearray. Bytes objects are immutable sequences of single bytes. Many of the string methods are available for bytes objects as well."""
"What is the byte array type in Python?, ""Byte array objects are a mutable counterpart to bytes objects. There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type. They are defined in the bytes and bytearray types section."""
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers. They are commonly used for looping, but are useful in a number of other contexts. The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent. Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created. The following"
"What are the mutable sequence types in Python?, ""The following types are mutable sequences: List, Byte Array."""
"What is the list type in Python?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items). Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What are set types in Python?, ""These represent unordered, finite sets of unique, immutable objects. As such, they cannot be indexed by any subscript. However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types in Python?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type in Python?, ""These represent a mutable set. They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type in Python?, ""These represent an immutable set. They are created by the built-in frozenset() constructor. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key."""
"What are mapping types in Python?, ""These represent finite sets of objects indexed by arbitrary index sets. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type in Python?, ""These represent finite sets of objects indexed by nearly arbitrary values. Dictionaries are mutable objects. They are created by the {key: value, ...} notation. Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What are dictionary view objects in Python?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes. Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types in Python?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type in Python?, ""A function object is a wrapper around a function. It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type in Python?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types in Python?, ""A class’s type is the type of its instances. Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types in Python?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types in Python?, ""Code objects represent byte-compiled executable Python code, or bytecode. The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values. A code object is immutable and contains no references (directly or indirectly) to mutable objects. Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types in Python?, ""Python supports a concept of iteration over containers. These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol in Python?, ""One type of iterator object is defined by having a __getitem__() method. Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol in Python?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types in Python?, ""Python’s generator provides a convenient way to implement the iterator protocol. If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods. Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class). Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes. If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance. Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"What is the type of a custom class?, ""Custom class types are typically created by class definitions (see section Class definitions). A class has a namespace implemented by a dictionary object. Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is the type of class objects?, ""A class object is a callable that produces a new instance of the class (for example, Class())."""
"What is the type of type objects?, ""Type objects represent the various object types. An object’s type is accessed by the built-in function type(). There are no special operations on types themselves. The standard module types defines names for all standard built-in types (some of which are the same names as the built-in functions); this is normally imported as follows: import types."""
"What is the identity of an object?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. The ‘is’ operator compares the identity of two objects. The ‘is’ operator compares the identity of two objects. The id() function returns an integer representing its identity."""
"What is the value of an object?, ""The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What is a module?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). Each module has its own symbol table, used as the global symbol table for all objects defined in the module. Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances. Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type. A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__). Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class. Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition. When it is called, it gives access to a separate namespace (the function’s local namespace). Parameter lists are defined in the function definition. An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class. It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object. A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode. Code objects are immutable and contain no references (directly or indirectly) to mutable objects. The executable code for a module is wrapped in a code object. Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory. Plain integers (also just called integers) are implemented in C using longs. Integer literals are described in the numeric literals section. Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers. Usually also known as floats. These are often implemented in C using doubles. Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part. The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.) Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers. The built-in function len() returns the number of items of a sequence. When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1. Item i of sequence a is selected by a[i] and slices are defined in sequence types. Sequences are classified according to their mutability; immutable sequence types (strings, tuples, bytes and range objects) and mutable sequence types (lists and bytearrays)."""
"What are the immutable sequence types in Python?, ""An immutable sequence object cannot be changed after it is created. If another object with a different value must be created, it is created with the return value of an operation. In contrast, mutable sequence objects can be changed in place. The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What is the string type in Python?, ""Strings are immutable sequences of Unicode code points. There is one string type: str. Strings are sequences of Unicode code points represented as Unicode strings in memory. Unicode code points in the range U+0000—U+10FFFF can be represented in a string. Strings can be written in a variety of ways, including single quotes, double quotes, triple quotes, and escape sequences."""
"What is the tuple type in Python?, ""Tuples are immutable sequences of arbitrary Python objects. Tuples are sequences of arbitrary Python objects. Tuples are written as comma-separated values, optionally enclosed in parentheses. Tuples are immutable, and typically contain a heterogeneous sequence of elements that are accessed via unpacking (see section Assignment statements) or indexing (or even by attribute in the case of named tuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list."""
"What is the bytes type in Python?, ""Bytes objects are immutable sequences of single bytes. There are exactly two built-in bytes object types: bytes and bytearray. Bytes objects are immutable sequences of single bytes. Many of the string methods are available for bytes objects as well."""
"What is the byte array type in Python?, ""Byte array objects are a mutable counterpart to bytes objects. There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type. They are defined in the bytes and bytearray types section."""
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers. They are commonly used for looping, but are useful in a number of other contexts. The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent. Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created. The following types are mutable sequences: List,"""
"What is the byte array type in Python?, ""Byte array objects are a mutable counterpart to bytes objects. There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type. They are defined in the bytes and bytearray types section."""
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers. They are commonly used for looping, but are useful in a number of other contexts. The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent. Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created. The following types are mutable sequences: List, Byte Array."""
"What is the list type in Python?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items). Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What are set types in Python?, ""These represent unordered, finite sets of unique, immutable objects. As such, they cannot be indexed by any subscript. However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types in Python?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type in Python?, ""These represent a mutable set. They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type in Python?, ""These represent an immutable set. They are created by the built-in frozenset() constructor. As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key."""
"What are mapping types in Python?, ""These represent finite sets of objects indexed by arbitrary index sets. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type in Python?, ""These represent finite sets of objects indexed by nearly arbitrary values. Dictionaries are mutable objects. They are created by the {key: value, ...} notation. Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What are dictionary view objects in Python?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes. Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types in Python?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type in Python?, ""A function object is a wrapper around a function. It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type in Python?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types in Python?, ""A class’s type is the type of its instances. Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types in Python?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types in Python?, ""Code objects represent byte-compiled executable Python code, or bytecode. The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values. A code object is immutable and contains no references (directly or indirectly) to mutable objects. Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types in Python?, ""Python supports a concept of iteration over containers. These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol in Python?, ""One type of iterator object is defined by having a __getitem__() method. Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol in Python?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types in Python?, ""Python’s generator provides a convenient way to implement the iterator protocol. If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods. Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class). Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes. If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance. Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"What is the type of a custom class?, ""Custom class types are typically created by class definitions (see section Class definitions). A class has a namespace implemented by a dictionary object. Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is the type of class objects?, ""A class object is a callable that produces a new instance of the class (for example, Class())."""
"What is the type of type objects?, ""Type objects represent the various object types. An object’s type is accessed by the built-in function type(). There are no special operations on types themselves. The standard module types defines names for all standard built-in types (some of which are the same names as the built-in functions); this is normally imported as follows: import types."""
"What is the identity of an object?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. The ‘is’ operator compares the identity of two objects. The ‘is’ operator compares the identity of two objects. The id() function returns an integer representing its identity."""
"What is the value of an object?, ""The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What is a module?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload()). Each module has its own symbol table, used as the global symbol table for all objects defined in the module. Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances. Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type. A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__). Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class. Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched. When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition. When it is called, it gives access to a separate namespace (the function’s local namespace). Parameter lists are defined in the function definition. An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class. It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object. A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object. You can call methods on an object using the dot notation (e.g., obj.method()). There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode. Code objects are immutable and contain no references (directly or indirectly) to mutable objects. The executable code for a module is wrapped in a code object. Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory. Plain integers (also just called integers) are implemented in C using longs. Integer literals are described in the numeric literals section. Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers. Usually also known as floats. These are often implemented in C using doubles. Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part. The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.) Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers. The built-in function len() returns the number of items of a sequence. When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1. Item i of sequence a is selected by a[i] and slices are defined in sequence types. Sequences are classified according to their mutability; immutable sequence types (strings, tuples, bytes and range objects) and mutable sequence types (lists and bytearrays)."""
"What are the immutable sequence types in Python?, ""An immutable sequence object cannot be changed after it is created. If another object with a different value must be created, it is created with the return value of an operation. In contrast, mutable sequence objects can be changed in place. The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What is the string type in Python?, ""Strings are immutable sequences of Unicode code points. There is one string type: str. Strings are sequences of Unicode code points represented as Unicode strings in memory. Unicode code points in the range U+0000—U+10FFFF can be represented in a string. Strings can be written in a variety of ways, including single quotes, double quotes, triple quotes, and escape sequences."""
"What is the tuple type in Python?, ""Tuples are immutable sequences of arbitrary Python objects. Tuples are sequences of arbitrary Python objects. Tuples are written as comma-separated values, optionally enclosed in parentheses. Tuples are immutable, and typically contain a heterogeneous sequence of elements that are accessed via unpacking (see section Assignment statements) or indexing (or even by attribute in the case of named tuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list."""
"What is the bytes type in Python?, ""Bytes objects are immutable sequences of single bytes. There are exactly two built-in bytes object types: bytes and bytearray. Bytes objects are immutable sequences of single bytes. Many of the string methods are available for bytes objects as well."""
"What is the byte array type in Python?, ""Byte array objects are a mutable counterpart to bytes objects. There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type. They are defined in the bytes and bytearray types section."""
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers. They are commonly used for looping, but are useful in a number of other contexts. The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent. Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created. The following types are mutable sequences:"""
"What is the list type in Python?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items)."""
"How can lists be constructed?, ""Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What are set types in Python?, ""These represent unordered, finite sets of unique, immutable objects."""
"Can set types be indexed by any subscript?, ""As such, they cannot be indexed by any subscript."""
"Can set types be iterated over?, ""However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types in Python?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type in Python?, ""These represent a mutable set."""
"How are set types created?, ""They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type in Python?, ""These represent an immutable set."""
"How are frozenset types created?, ""They are created by the built-in frozenset() constructor."""
"Can frozensets be used as elements of another set?, ""As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key."""
"What types of objects can be members of a set?, ""For the moment, only hashable objects can be members of a set."""
"What are mapping types in Python?, ""These represent finite sets of objects indexed by arbitrary index sets."""
"Are mappings mutable or immutable objects?, ""Mappings are mutable objects."""
"What is the standard mapping type?, ""There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type in Python?, ""These represent finite sets of objects indexed by nearly arbitrary values."""
"Are dictionaries mutable or immutable objects?, ""Dictionaries are mutable objects."""
"How are dictionaries created?, ""They are created by the {key: value, ...} notation."""
"Where are dictionaries extensively used?, ""Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What are dictionary view objects in Python?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects."""
"What kind of view do dictionary view objects provide?, ""They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes."""
"Can dictionary views be iterated over?, ""Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types in Python?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type in Python?, ""A function object is a wrapper around a function."""
"What is a Python function object?, ""It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type in Python?, ""A method is a function that is associated with an object."""
"How can methods be called?, ""You can call methods on an object using the dot notation (e.g., obj.method())."""
"What flavors of methods are there?, ""There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types in Python?, ""A class’s type is the type of its instances."""
"Are class objects generally callable?, ""Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types in Python?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types in Python?, ""Code objects represent byte-compiled executable Python code, or bytecode."""
"What is the difference between a code object and a function object?, ""The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values."""
"Are code objects mutable?, ""A code object is immutable and contains no references (directly or indirectly) to mutable objects."""
"How can code objects be obtained?, ""Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types in Python?, ""Python supports a concept of iteration over containers."""
"How are iterator types implemented?, ""These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol in Python?, ""One type of iterator object is defined by having a __getitem__() method."""
"How does Python use the __getitem__() method for iteration?, ""Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol in Python?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types in Python?, ""Python’s generator provides a convenient way to implement the iterator protocol."""
"How do generator types implement the iterator protocol?, ""If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods."""
"What is another way to create iterator objects?, ""Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class)."""
"How is the namespace of class instances implemented?, ""Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched."""
"What happens if an attribute is not found in the instance's dictionary?, ""When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What happens if a class instance attribute is a user-defined function object?, ""If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance."""
"Do static, class, and abstract class objects support instance creation?, ""Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload())."""
"How is the namespace of a module implemented?, ""A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"How are custom class types typically created?, ""Custom class types are typically created by class definitions (see section Class definitions)."""
"How is the namespace of a class implemented?, ""A class has a namespace implemented by a dictionary object."""
"Where are class instance attributes found?, ""Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is the type of class objects?, ""A class object is a callable that produces a new instance of the class (for example, Class())."""
"How is an object's type accessed?, ""An object’s type is accessed by the built-in function type()."""
"Are there special operations on type objects?, ""There are no special operations on types themselves."""
"What module defines names for all standard built-in types?, ""The standard module types defines names for all standard built-in types (some of which are the same names as the built-in functions); this is normally imported as follows: import types."""
"What is the identity of an object?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory."""
"How can you think of an object's identity?, ""You may think of it as the object’s address in memory."""
"What operator compares the identity of two objects?, ""The ‘is’ operator compares the identity of two objects."""
"What function returns an integer representing an object's identity?, ""The id() function returns an integer representing its identity."""
"What is the value of an object?, ""The value of some objects can change."""
"What are mutable objects?, ""Objects whose value can change are said to be mutable."""
"What are immutable objects?, ""Objects whose value is unchangeable once they are created are called immutable."""
"What determines an object's mutability?, ""An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What are modules?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload())."""
"How is the symbol table of a module used?, ""Each module has its own symbol table, used as the global symbol table for all objects defined in the module."""
"What can modules contain?, ""Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances."""
"What does a class support?, ""Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type."""
"How is the namespace of a class implemented?, ""A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__)."""
"Where are class instance attributes found?, ""Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class."""
"How is the namespace of an instance implemented?, ""Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched."""
"What happens if an attribute is not found in an instance's dictionary?, ""When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition."""
"What does a function object give access to when called?, ""When it is called, it gives access to a separate namespace (the function’s local namespace)."""
"Where are parameter lists defined?, ""Parameter lists are defined in the function definition."""
"What is an instance method object?, ""An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class."""
"What argument is passed to the function object in an instance method object?, ""It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object."""
"May a function object have a type annotation?, ""A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object."""
"How can methods be called on an object?, ""You can call methods on an object using the dot notation (e.g., obj.method())."""
"What are the flavors of methods?, ""There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode."""
"Are code objects mutable or immutable?, ""Code objects are immutable and contain no references (directly or indirectly) to mutable objects."""
"What is wrapped in a code object?, ""The executable code for a module is wrapped in a code object."""
"How are code objects represented internally?, ""Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory."""
"How are plain integers implemented in C?, ""Plain integers (also just called integers) are implemented in C using longs."""
"Where are integer literals described?, ""Integer literals are described in the numeric literals section."""
"Are integers mutable numeric types?, ""Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers."""
"What are floating point numbers often implemented in C?, ""These are often implemented in C using doubles."""
"Are floating point numbers mutable numeric types?, ""Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part."""
"How can the real and imaginary parts of a complex number be retrieved?, ""The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.)"""
"Are complex numbers mutable numeric types?, ""Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers."""
"What built-in function returns the number of items of a sequence?, ""The built-in function len() returns the number of items of a sequence."""
"If the length of a sequence is n, what numbers does the index set contain?, ""When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1."""
"How is item i of sequence a selected?, ""Item i of sequence a is selected by a[i] and slices are defined in sequence types."""
"How are sequences classified?, ""Sequences are classified according to their mutability; immutable sequence types (strings, tuples, bytes and range objects) and mutable sequence types (lists and bytearrays)."""
"What are immutable sequence types in Python?, ""An immutable sequence object cannot be changed after it is created."""
"How is another object with a different value created for immutable sequences?, ""If another object with a different value must be created, it is created with the return value of an operation."""
"How can mutable sequence objects be changed?, ""In contrast, mutable sequence objects can be changed in place."""
"What types are immutable sequences?, ""The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What type are strings in Python?, ""Strings are immutable sequences of Unicode code points."""
"What string type is there in Python?, ""There is one string type: str."""
"How are strings represented in memory?, ""Strings are sequences of Unicode code points represented as Unicode strings in memory."""
"What range of Unicode code points can be represented in a string?, ""Unicode code points in the range U+0000—U+10FFFF can be represented in a string."""
"How can strings be written?, ""Strings can be written in a variety of ways, including single quotes, double quotes, triple quotes, and escape sequences."""
"What type are tuples in Python?, ""Tuples are immutable sequences of arbitrary Python objects."""
"How are tuples written?, ""Tuples are written as comma-separated values, optionally enclosed in parentheses."""
"What do tuples typically contain?, ""Tuples are immutable, and typically contain a heterogeneous sequence of elements that are accessed via unpacking (see section Assignment statements) or indexing (or even by attribute in the case of named tuples)."""
"How are list elements accessed?, ""Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list."""
"What type are bytes objects?, ""Bytes objects are immutable sequences of single bytes."""
"How many built-in bytes object types are there?, ""There are exactly two built-in bytes object types: bytes and bytearray."""
"Are bytes objects mutable?, ""Bytes objects are immutable sequences of single bytes."""
"What methods are available for bytes objects?, ""Many of the string methods are available for bytes objects as well."""
"What type are byte array objects?, ""Byte array objects are a mutable counterpart to bytes objects."""
"What is the purpose of the bytes type and the bytearray type?, ""There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type."""
"Where are bytes and bytearray types defined?, ""They are defined in the bytes and"
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers."""
"What are range types commonly used for?, ""They are commonly used for looping, but are useful in a number of other contexts."""
"What is the advantage of range objects?, ""The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent."""
"What sequence operations do range objects implement?, ""Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created."""
"What types are mutable sequences?, ""The following types are mutable sequences: List, Byte Array."""
"What is the list type in Python?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items)."""
"How can lists be constructed?, ""Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What are set types in Python?, ""These represent unordered, finite sets of unique, immutable objects."""
"Can set types be indexed by any subscript?, ""As such, they cannot be indexed by any subscript."""
"Can set types be iterated over?, ""However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types in Python?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type in Python?, ""These represent a mutable set."""
"How are set types created?, ""They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type in Python?, ""These represent an immutable set."""
"How are frozenset types created?, ""They are created by the built-in frozenset() constructor."""
"Can frozensets be used as elements of another set?, ""As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key."""
"What types of objects can be members of a set?, ""For the moment, only hashable objects can be members of a set."""
"What are mapping types in Python?, ""These represent finite sets of objects indexed by arbitrary index sets."""
"Are mappings mutable or immutable objects?, ""Mappings are mutable objects."""
"What is the standard mapping type?, ""There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type in Python?, ""These represent finite sets of objects indexed by nearly arbitrary values."""
"Are dictionaries mutable or immutable objects?, ""Dictionaries are mutable objects."""
"How are dictionaries created?, ""They are created by the {key: value, ...} notation."""
"Where are dictionaries extensively used?, ""Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What are dictionary view objects in Python?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects."""
"What kind of view do dictionary view objects provide?, ""They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes."""
"Can dictionary views be iterated over?, ""Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types in Python?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type in Python?, ""A function object is a wrapper around a function."""
"What is a Python function object?, ""It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type in Python?, ""A method is a function that is associated with an object."""
"How can methods be called?, ""You can call methods on an object using the dot notation (e.g., obj.method())."""
"What flavors of methods are there?, ""There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types in Python?, ""A class’s type is the type of its instances."""
"Are class objects generally callable?, ""Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types in Python?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types in Python?, ""Code objects represent byte-compiled executable Python code, or bytecode."""
"What is the difference between a code object and a function object?, ""The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values."""
"Are code objects mutable?, ""A code object is immutable and contains no references (directly or indirectly) to mutable objects."""
"How can code objects be obtained?, ""Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types in Python?, ""Python supports a concept of iteration over containers."""
"How are iterator types implemented?, ""These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol in Python?, ""One type of iterator object is defined by having a __getitem__() method."""
"How does Python use the __getitem__() method for iteration?, ""Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol in Python?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types in Python?, ""Python’s generator provides a convenient way to implement the iterator protocol."""
"How do generator types implement the iterator protocol?, ""If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods."""
"What is another way to create iterator objects?, ""Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class)."""
"How is the namespace of class instances implemented?, ""Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched."""
"What happens if an attribute is not found in the instance's dictionary?, ""When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What happens if a class instance attribute is a user-defined function object?, ""If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance."""
"Do static, class, and abstract class objects support instance creation?, ""Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload())."""
"How is the namespace of a module implemented?, ""A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"How are custom class types typically created?, ""Custom class types are typically created by class definitions (see section Class definitions)."""
"How is the namespace of a class implemented?, ""A class has a namespace implemented by a dictionary object."""
"Where are class instance attributes found?, ""Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is the type of class objects?, ""A class object is a callable that produces a new instance of the class (for example, Class())."""
"How is an object's type accessed?, ""An object’s type is accessed by the built-in function type()."""
"Are there special operations on type objects?, ""There are no special operations on types themselves."""
"What module defines names for all standard built-in types?, ""The standard module types defines names for all standard built-in types (some of which are the same names as the built-in functions); this is normally imported as follows: import types."""
"What is the identity of an object?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory."""
"How can you think of an object's identity?, ""You may think of it as the object’s address in memory."""
"What operator compares the identity of two objects?, ""The ‘is’ operator compares the identity of two objects."""
"What function returns an integer representing an object's identity?, ""The id() function returns an integer representing its identity."""
"What is the value of an object?, ""The value of some objects can change."""
"What are mutable objects?, ""Objects whose value can change are said to be mutable."""
"What are immutable objects?, ""Objects whose value is unchangeable once they are created are called immutable."""
"What determines an object's mutability?, ""An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What are modules?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload())."""
"How is the symbol table of a module used?, ""Each module has its own symbol table, used as the global symbol table for all objects defined in the module."""
"What can modules contain?, ""Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances."""
"What does a class support?, ""Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type."""
"How is the namespace of a class implemented?, ""A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__)."""
"Where are class instance attributes found?, ""Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class."""
"How is the namespace of an instance implemented?, ""Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched."""
"What happens if an attribute is not found in an instance's dictionary?, ""When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition."""
"What does a function object give access to when called?, ""When it is called, it gives access to a separate namespace (the function’s local namespace)."""
"Where are parameter lists defined?, ""Parameter lists are defined in the function definition."""
"What is an instance method object?, ""An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class."""
"What argument is passed to the function object in an instance method object?, ""It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object."""
"May a function object have a type annotation?, ""A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object."""
"How can methods be called on an object?, ""You can call methods on an object using the dot notation (e.g., obj.method())."""
"What are the flavors of methods?, ""There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode."""
"Are code objects mutable or immutable?, ""Code objects are immutable and contain no references (directly or indirectly) to mutable objects."""
"What is wrapped in a code object?, ""The executable code for a module is wrapped in a code object."""
"How are code objects represented internally?, ""Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory."""
"How are plain integers implemented in C?, ""Plain integers (also just called integers) are implemented in C using longs."""
"Where are integer literals described?, ""Integer literals are described in the numeric literals section."""
"Are integers mutable numeric types?, ""Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers."""
"What are floating point numbers often implemented in C?, ""These are often implemented in C using doubles."""
"Are floating point numbers mutable numeric types?, ""Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part."""
"How can the real and imaginary parts of a complex number be retrieved?, ""The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.)"""
"Are complex numbers mutable numeric types?, ""Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers."""
"What built-in function returns the number of items of a sequence?, ""The built-in function len() returns the number of items of a sequence."""
"If the length of a sequence is n, what numbers does the index set contain?, ""When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1."""
"How is item i of sequence a selected?, ""Item i of sequence a is selected by a[i] and slices are defined in sequence types."""
"How are sequences classified?, ""Sequences are classified according to their mutability; immutable sequence types (strings, tuples, bytes and range objects) and mutable sequence types (lists and bytearrays)."""
"What are immutable sequence types in Python?, ""An immutable sequence object cannot be changed after it is created."""
"How is another object with a different value created for immutable sequences?, ""If another object with a different value must be created, it is created with the return value of an operation."""
"How can mutable sequence objects be changed?, ""In contrast, mutable sequence objects can be changed in place."""
"What types are immutable sequences?, ""The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What type are strings in Python?, ""Strings are immutable sequences of Unicode code points."""
"What string type is there in Python?, ""There is one string type: str."""
"How are strings represented in memory?, ""Strings are sequences of Unicode code points represented as Unicode strings in memory."""
"What range of Unicode code points can be represented in a string?, ""Unicode code points in the range U+0000—U+10FFFF can be represented in a string."""
"How can strings be written?, ""Strings can be written in a variety of ways, including single quotes, double quotes, triple quotes, and escape sequences."""
"What type are tuples in Python?, ""Tuples are immutable sequences of arbitrary Python objects."""
"How are tuples written?, ""Tuples are written as comma-separated values, optionally enclosed in parentheses."""
"What do tuples typically contain?, ""Tuples are immutable, and typically contain a heterogeneous sequence of elements that are accessed via unpacking (see section Assignment statements) or indexing (or even by attribute in the case of named tuples)."""
"How are list elements accessed?, ""Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list."""
"What type are bytes objects?, ""Bytes objects are immutable sequences of single bytes."""
"How many built-in bytes object types are there?, ""There are exactly two built-in bytes object types: bytes and bytearray."""
"Are bytes objects mutable?, ""Bytes objects are immutable sequences of single bytes."""
"What methods are available for bytes objects?, ""Many of the string methods are available for bytes objects as well."""
"What type are byte array objects?, ""Byte array objects are a mutable counterpart to bytes objects."""
"What is the purpose of the bytes type and the bytearray type?, ""There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type."""
"Where are bytes and bytearray types defined?, ""They are defined in the bytes and bytearray types section."""
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers."""
"What are range types commonly used for?, ""They are commonly used for looping, but are useful in a number of other contexts."""
"What is the advantage of range objects?, ""The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent."""
"What sequence operations do range objects implement?, ""Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created."""
"What types are mutable sequences?, ""The following types are mutable sequences: List, Byte Array."""
"What is the list type in Python?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items)."""
"How can lists be constructed?, ""Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What are set types in Python?, ""These represent unordered, finite sets of unique, immutable objects."""
"Can set types be indexed by any subscript?, ""As such, they cannot be indexed by any subscript."""
"Can set types be iterated over?, ""However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types in Python?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type in Python?, ""These represent a mutable set."""
"How are set types created?, ""They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type in Python?, ""These represent an immutable set."""
"How are frozenset types created?, ""They are created by the built-in frozenset() constructor."""
"Can frozensets be used as elements of another set?, ""As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key."""
"What types of objects can be members of a set?, ""For the moment, only hashable objects can be members of a set."""
"What are mapping types in Python?, ""These represent finite sets of objects indexed by arbitrary index sets."""
"Are mappings mutable or immutable objects?, ""Mappings are mutable objects."""
"What is the standard mapping type?, ""There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type in Python?, ""These represent finite sets of objects indexed by nearly arbitrary values."""
"Are dictionaries mutable or immutable objects?, ""Dictionaries are mutable objects."""
"How are dictionaries created?, ""They are created by the {key: value, ...} notation."""
"Where are dictionaries extensively used?, ""Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What are dictionary view objects in Python?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects."""
"What kind of view do dictionary view objects provide?, ""They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes."""
"Can dictionary views be iterated over?, ""Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types in Python?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type in Python?, ""A function object is a wrapper around a function."""
"What is a Python function object?, ""It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type in Python?, ""A method is a function that is associated with an object."""
"How can methods be called?, ""You can call methods on an object using the dot notation (e.g., obj.method())."""
"What flavors of methods are there?, ""There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types in Python?, ""A class’s type is the type of its instances."""
"Are class objects generally callable?, ""Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types in Python?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types in Python?, ""Code objects represent byte-compiled executable Python code, or bytecode."""
"What is the difference between a code object and a function object?, ""The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values."""
"Are code objects mutable?, ""A code object is immutable and contains no references (directly or indirectly) to mutable objects."""
"How can code objects be obtained?, ""Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types in Python?, ""Python supports a concept of iteration over containers."""
"How are iterator types implemented?, ""These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol in Python?, ""One type of iterator object is defined by having a __getitem__() method."""
"How does Python use the __getitem__() method for iteration?, ""Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol in Python?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types in Python?, ""Python’s generator provides a convenient way to implement the iterator protocol."""
"How do generator types implement the iterator protocol?, ""If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods."""
"What is another way to create iterator objects?, ""Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class)."""
"How is the namespace of class instances implemented?, ""Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched."""
"What happens if an attribute is not found in the instance's dictionary?, ""When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What happens if a class instance attribute is a user-defined function object?, ""If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance."""
"Do static, class, and abstract class objects support instance creation?, ""Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload())."""
"How is the namespace of a module implemented?, ""A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"How are custom class types typically created?, ""Custom class types are typically created by class definitions (see section Class definitions)."""
"How is the namespace of a class implemented?, ""A class has a namespace implemented by a dictionary object."""
"Where are class instance attributes found?, ""Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is the type of class objects?, ""A class object is a callable that produces a new instance of the class (for example, Class())."""
"How is an object's type accessed?, ""An object’s type is accessed by the built-in function type()."""
"Are there special operations on type objects?, ""There are no special operations on types themselves."""
"What module defines names for all standard built-in types?, ""The standard module types defines names for all standard built-in types (some of which are the same names as the built-in functions); this is normally imported as follows: import types."""
"What is the identity of an object?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory."""
"How can you think of an object's identity?, ""You may think of it as the object’s address in memory."""
"What operator compares the identity of two objects?, ""The ‘is’ operator compares the identity of two objects."""
"What function returns an integer representing an object's identity?, ""The id() function returns an integer representing its identity."""
"What is the value of an object?, ""The value of some objects can change."""
"What are mutable objects?, ""Objects whose value can change are said to be mutable."""
"What are immutable objects?, ""Objects whose value is unchangeable once they are created are called immutable."""
"What determines an object's mutability?, ""An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What are modules?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload())."""
"How is the symbol table of a module used?, ""Each module has its own symbol table, used as the global symbol table for all objects defined in the module."""
"What can modules contain?, ""Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances."""
"What does a class support?, ""Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type."""
"How is the namespace of a class implemented?, ""A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__)."""
"Where are class instance attributes found?, ""Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class."""
"How is the namespace of an instance implemented?, ""Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched."""
"What happens if an attribute is not found in an instance's dictionary?, ""When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition."""
"What does a function object give access to when called?, ""When it is called, it gives access to a separate namespace (the function’s local namespace)."""
"Where are parameter lists defined?, ""Parameter lists are defined in the function definition."""
"What is an instance method object?, ""An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class."""
"What argument is passed to the function object in an instance method object?, ""It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object."""
"May a function object have a type annotation?, ""A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object."""
"How can methods be called on an object?, ""You can call methods on an object using the dot notation (e.g., obj.method())."""
"What are the flavors of methods?, ""There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode."""
"Are code objects mutable or immutable?, ""Code objects are immutable and contain no references (directly or indirectly) to mutable objects."""
"What is wrapped in a code object?, ""The executable code for a module is wrapped in a code object."""
"How are code objects represented internally?, ""Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory."""
"How are plain integers implemented in C?, ""Plain integers (also just called integers) are implemented in C using longs."""
"Where are integer literals described?, ""Integer literals are described in the numeric literals section."""
"Are integers mutable numeric types?, ""Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers."""
"What are floating point numbers often implemented in C?, ""These are often implemented in C using doubles."""
"Are floating point numbers mutable numeric types?, ""Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part."""
"How can the real and imaginary parts of a complex number be retrieved?, ""The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.)"""
"Are complex numbers mutable numeric types?, ""Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers."""
"What built-in function returns the number of items of a sequence?, ""The built-in function len() returns the number of items of a sequence."""
"If the length of a sequence is n, what numbers does the index set contain?, ""When the length of a sequence is n, the index set contains the numbers 0, 1, ..., n-1."""
"How is item i of sequence a selected?, ""Item i of sequence a is selected by a[i] and slices are defined in sequence types."""
"How are sequences classified?, ""Sequences are classified according to their mutability; immutable sequence types (strings, tuples, bytes and range objects) and mutable sequence types (lists and bytearrays)."""
"What are immutable sequence types in Python?, ""An immutable sequence object cannot be changed after it is created."""
"How is another object with a different value created for immutable sequences?, ""If another object with a different value must be created, it is created with the return value of an operation."""
"How can mutable sequence objects be changed?, ""In contrast, mutable sequence objects can be changed in place."""
"What types are immutable sequences?, ""The following types are immutable sequences: String, Unicode, Tuple, Bytes, Byte Array, Range."""
"What type are strings in Python?, ""Strings are immutable sequences of Unicode code points."""
"What type are strings in Python?, ""Strings are immutable sequences of Unicode code points."""
"What string type is there in Python?, ""There is one string type: str."""
"How are strings represented in memory?, ""Strings are sequences of Unicode code points represented as Unicode strings in memory."""
"What range of Unicode code points can be represented in a string?, ""Unicode code points in the range U+0000—U+10FFFF can be represented in a string."""
"How can strings be written?, ""Strings can be written in a variety of ways, including single quotes, double quotes, triple quotes, and escape sequences."""
"What type are tuples in Python?, ""Tuples are immutable sequences of arbitrary Python objects."""
"How are tuples written?, ""Tuples are written as comma-separated values, optionally enclosed in parentheses."""
"What do tuples typically contain?, ""Tuples are immutable, and typically contain a heterogeneous sequence of elements that are accessed via unpacking (see section Assignment statements) or indexing (or even by attribute in the case of named tuples)."""
"How are list elements accessed?, ""Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list."""
"What type are bytes objects?, ""Bytes objects are immutable sequences of single bytes."""
"How many built-in bytes object types are there?, ""There are exactly two built-in bytes object types: bytes and bytearray."""
"Are bytes objects mutable?, ""Bytes objects are immutable sequences of single bytes."""
"What methods are available for bytes objects?, ""Many of the string methods are available for bytes objects as well."""
"What type are byte array objects?, ""Byte array objects are a mutable counterpart to bytes objects."""
"What is the purpose of the bytes type and the bytearray type?, ""There is a dedicated type to handle binary data: the bytes type, and the mutable bytearray type."""
"Where are bytes and bytearray types defined?, ""They are defined in the bytes and bytearray types section."""
"What is the range type in Python?, ""Rather than being a function, range is actually an immutable sequence type dedicated to representing ranges of integers."""
"What are range types commonly used for?, ""They are commonly used for looping, but are useful in a number of other contexts."""
"What is the advantage of range objects?, ""The advantage of range objects is that they always take the same (small) amount of memory, no matter how big the range they represent."""
"What sequence operations do range objects implement?, ""Range objects implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition will often violate that pattern)."""
"What are the mutable sequence types in Python?, ""Mutable sequences can be changed after they are created."""
"What types are mutable sequences?, ""The following types are mutable sequences: List, Byte Array."""
"What is the list type in Python?, ""Lists are mutable sequences, typically used to store collections of homogeneous items (although there are no strict restrictions on the type or mutability of the items)."""
"How can lists be constructed?, ""Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list:; Using square brackets, separating items with commas: [a], [a, b, c]; Using a list comprehension: [x for x in iterable]; Using the type constructor: list() or list(iterable)."""
"What are set types in Python?, ""These represent unordered, finite sets of unique, immutable objects."""
"Can set types be indexed by any subscript?, ""As such, they cannot be indexed by any subscript."""
"Can set types be iterated over?, ""However, they can be iterated over, and the built-in function len() returns the number of items in a set."""
"What are the built-in set types in Python?, ""Python provides two built-in set types: sets and frozensets."""
"What is the set type in Python?, ""These represent a mutable set."""
"How are set types created?, ""They are created by the built-in set() constructor and can be modified afterwards by several methods, such as add()."""
"What is the frozenset type in Python?, ""These represent an immutable set."""
"How are frozenset types created?, ""They are created by the built-in frozenset() constructor."""
"Can frozensets be used as elements of another set?, ""As a frozenset is immutable and hashable, it can be used again as an element of another set, or as a dictionary key."""
"What types of objects can be members of a set?, ""For the moment, only hashable objects can be members of a set."""
"What are mapping types in Python?, ""These represent finite sets of objects indexed by arbitrary index sets."""
"Are mappings mutable or immutable objects?, ""Mappings are mutable objects."""
"What is the standard mapping type?, ""There is currently only one standard mapping type, the dictionary."""
"What is the dictionary type in Python?, ""These represent finite sets of objects indexed by nearly arbitrary values."""
"Are dictionaries mutable or immutable objects?, ""Dictionaries are mutable objects."""
"How are dictionaries created?, ""They are created by the {key: value, ...} notation."""
"Where are dictionaries extensively used?, ""Dictionaries are extensively used in the implementation of every Python object: attribute lookup, item import, and globals and locals are all stored in dictionaries."""
"What are dictionary view objects in Python?, ""The objects returned by dict.keys(), dict.values() and dict.items() are view objects."""
"What kind of view do dictionary view objects provide?, ""They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes."""
"Can dictionary views be iterated over?, ""Dictionary views can be iterated over to yield their respective data, and support membership tests:"""
"What are callable types in Python?, ""These are the types to which the function call operation (see section Calls) can be applied: Function, Methods, Class Types, Class Instances, Code Objects"""
"What is the function type in Python?, ""A function object is a wrapper around a function."""
"What is a Python function object?, ""It is a Python object which is callable and can be passed as an argument to another function."""
"What is the method type in Python?, ""A method is a function that is associated with an object."""
"How can methods be called?, ""You can call methods on an object using the dot notation (e.g., obj.method())."""
"What flavors of methods are there?, ""There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What are class types in Python?, ""A class’s type is the type of its instances."""
"Are class objects generally callable?, ""Generally, class objects are callable (to produce a new instance), but class objects can be made non-callable by overriding __call__()."""
"What are class instance types in Python?, ""Instances of a class can be made callable by defining a __call__() method in their class."""
"What are code object types in Python?, ""Code objects represent byte-compiled executable Python code, or bytecode."""
"What is the difference between a code object and a function object?, ""The difference between a code object and a function object is that the function object contains an explicit reference to the function’s (global) globals, while a code object contains no context; also the function object contains default parameter values."""
"Are code objects mutable?, ""A code object is immutable and contains no references (directly or indirectly) to mutable objects."""
"How can code objects be obtained?, ""Code objects are not directly accessible as a return value by a built-in function, but can be obtained by importing the types module and by getting it from a function’s __code__ attribute."""
"What is the type of Boolean operations?, ""These represent the truth values False and True."""
"What is the type of the None object?, ""This type has a single value, None. Objects of this type are not writable. It is called NoneType in the C Python API."""
"What are iterator types in Python?, ""Python supports a concept of iteration over containers."""
"How are iterator types implemented?, ""These are implemented using two distinct methods; these are used to allow user-defined classes to support iteration."""
"What is the old-style iterator protocol in Python?, ""One type of iterator object is defined by having a __getitem__() method."""
"How does Python use the __getitem__() method for iteration?, ""Python uses the following process if it is attempting to iterate over an object (where obj is the sequence object): it calls __getitem__() with consecutive integers starting with 0 as an index (if the integer is out of range, IndexError is raised; any other exception is propagated). When the caller is done with a sequence, or if the sequence is infinite, no further calls are made to __getitem__()."""
"What is the current iterator protocol in Python?, ""An iterator object itself is required to support the following two methods, which together form the iterator protocol: __iter__(), __next__()"""
"What does the __iter__() method of an iterator object do?, ""Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the “first” step in iteration: it returns the iterator object itself."""
"What does the __next__() method of an iterator object do?, ""Return the next item from the container. If there are no further items, raise the StopIteration exception. This method corresponds to the “next” step in iteration, and is also the equivalent of the next() built-in function."""
"What are generator types in Python?, ""Python’s generator provides a convenient way to implement the iterator protocol."""
"How do generator types implement the iterator protocol?, ""If a container object’s __iter__() method is implemented as a generator, it will automatically return an iterator object (technically, a generator object), which supplies the __iter__() and __next__() methods."""
"What is another way to create iterator objects?, ""Generator expressions provide a more convenient yet even more compact way to create iterator objects."""
"What is the type of class instances?, ""Class instances are created by calling a class object (for example, if Class is a class object, then Class() creates a new instance of that class)."""
"How is the namespace of class instances implemented?, ""Class instances have a namespace implemented as a dictionary which is the first place in which attribute references are searched."""
"What happens if an attribute is not found in the instance's dictionary?, ""When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What happens if a class instance attribute is a user-defined function object?, ""If a class instance attribute is found that is a user-defined function object, it is transformed into an instance method object whose __self__ attribute is the instance."""
"Do static, class, and abstract class objects support instance creation?, ""Static class and abstract class objects do not support the creation of instances either through a regular call or subclassing (attempting to create a subclass of such an object will raise a TypeError)."""
"What is the type of modules?, ""Modules are a basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload())."""
"How is the namespace of a module implemented?, ""A module has a namespace implemented by a dictionary object (this is the dictionary referenced by the func.__globals__ attribute of functions defined in the module)."""
"How are custom class types typically created?, ""Custom class types are typically created by class definitions (see section Class definitions)."""
"How is the namespace of a class implemented?, ""A class has a namespace implemented by a dictionary object."""
"Where are class instance attributes found?, ""Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is the type of class objects?, ""A class object is a callable that produces a new instance of the class (for example, Class())."""
"How is an object's type accessed?, ""An object’s type is accessed by the built-in function type()."""
"Are there special operations on type objects?, ""There are no special operations on types themselves."""
"What module defines names for all standard built-in types?, ""The standard module types defines names for all standard built-in types (some of which are the same names as the built-in functions); this is normally imported as follows: import types."""
"What is the identity of an object?, ""An object’s identity never changes once it has been created; you may think of it as the object’s address in memory."""
"How can you think of an object's identity?, ""You may think of it as the object’s address in memory."""
"What operator compares the identity of two objects?, ""The ‘is’ operator compares the identity of two objects."""
"What function returns an integer representing an object's identity?, ""The id() function returns an integer representing its identity."""
"What is the value of an object?, ""The value of some objects can change."""
"What are mutable objects?, ""Objects whose value can change are said to be mutable."""
"What are immutable objects?, ""Objects whose value is unchangeable once they are created are called immutable."""
"What determines an object's mutability?, ""An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."""
"What are modules?, ""Modules are the basic organizational unit of Python code, and are created by the import system as it encounters import statements (as well as by calls to built-in functions such as importlib.reload())."""
"How is the symbol table of a module used?, ""Each module has its own symbol table, used as the global symbol table for all objects defined in the module."""
"What can modules contain?, ""Modules can contain executable statements as well as function definitions."""
"What is a class?, ""A class object serves as a template for creating instances."""
"What does a class support?, ""Classes support inheritance, which is a mechanism of reusing implementations from one or more base classes, allowing you to define a type by terms of another type."""
"How is the namespace of a class implemented?, ""A class has a namespace implemented by a dictionary object (this is the dictionary referenced by Class.__dict__)."""
"Where are class instance attributes found?, ""Class instance attributes are found in the dictionary of the instance as well as in the class’s namespace and those of its base classes."""
"What is an instance?, ""A class instance is a concrete occurrence of a class."""
"How is the namespace of an instance implemented?, ""Each instance has its own namespace implemented as a dictionary, and this is the first place in which attribute references are searched."""
"What happens if an attribute is not found in an instance's dictionary?, ""When an attribute is not found in this dictionary, and the instance’s class has an attribute by that name, the search continues with the class attributes."""
"What is a function?, ""A function object is a callable object created by a function definition."""
"What does a function object give access to when called?, ""When it is called, it gives access to a separate namespace (the function’s local namespace)."""
"Where are parameter lists defined?, ""Parameter lists are defined in the function definition."""
"What is an instance method object?, ""An instance method object is a callable object that is the result of accessing a function object (one defined inside a class definition) through an instance of that class."""
"What argument is passed to the function object in an instance method object?, ""It passes the instance object (that instance that the method was accessed through) as the first argument (usually called self) to the function object."""
"May a function object have a type annotation?, ""A function object may or may not have a type annotation associated with it."""
"What is a method?, ""A method is a function that is associated with an object."""
"How can methods be called on an object?, ""You can call methods on an object using the dot notation (e.g., obj.method())."""
"What are the flavors of methods?, ""There are two flavors: built-in methods (such as list.append()) and class instance methods."""
"What is a code object?, ""A code object is a compiled sequence of Python byte code instructions, also called bytecode."""
"Are code objects mutable or immutable?, ""Code objects are immutable and contain no references (directly or indirectly) to mutable objects."""
"What is wrapped in a code object?, ""The executable code for a module is wrapped in a code object."""
"How are code objects represented internally?, ""Code objects are represented internally by the PyCodeObject C struct."""
"What are the principal built-in types of Python?, ""The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions."""
"What are the numeric types in Python?, ""Python has the following numeric types: int, float, and complex."""
"What is the int type in Python?, ""These represent integers of unlimited range, subject to available (virtual) memory."""
"How are plain integers implemented in C?, ""Plain integers (also just called integers) are implemented in C using longs."""
"Where are integer literals described?, ""Integer literals are described in the numeric literals section."""
"Are integers mutable numeric types?, ""Integers are immutable numeric types."""
"What is the float type in Python?, ""These represent floating point numbers and are represented internally as double-precision (64 bit) floating point numbers."""
"What are floating point numbers often implemented in C?, ""These are often implemented in C using doubles."""
"Are floating point numbers mutable numeric types?, ""Floating point numbers are immutable numeric types."""
"What is the complex type in Python?, ""These represent complex numbers and are represented internally as a pair of double-precision floating point numbers; the real and imaginary part."""
"How can the real and imaginary parts of a complex number be retrieved?, ""The real and imaginary parts of a complex number z can be retrieved through the read-only attributes z.real and z.imag. (The library includes the complex numeric type.)"""
"Are complex numbers mutable numeric types?, ""Complex numbers are immutable numeric types."""
"What are sequence types in Python?, ""These represent finite ordered index sets indexed by non-negative numbers."""
"What built-in function returns the number of items of a sequence?, ""The built-in function len() returns the number of items of a sequence."""
"If the length of a sequence is n, what numbers does the index set contain?, ""When the length of a sequence is n, the index set contains the numbers 0"